// --------------------------------
//   Theme Configuration (vars)
// --------------------------------

@use 'sass:map';

@use '../tokens';
@use '../helpers' as *;

@use 'theme/colors';
@use 'theme/typography';

// --------------------------------
//   Config
// --------------------------------

$enabled-brand-colors: primary secondary neutral !default;
$enabled-extended-colors: () !default;
$enabled-color-variants: primary secondary neutral info success warning danger !default;

// --------------------------------
//   Colors
// --------------------------------

$colors: map-merge(colors.$base, colors.$semantic);
@each $color in $enabled-brand-colors {
  $values: map.get(colors.$brand, $color);
  $colors: map.merge(
    $colors,
    (
      $color: $values,
    )
  );
}
@each $color in $enabled-extended-colors {
  $values: map.get(colors.$extended, $color);
  $colors: map.merge(
    $colors,
    (
      $color: $values,
    )
  );
}

// --------------------------------
//   Theme
// --------------------------------

$default-theme: (
  animations: tokens.$animations,
  aspect: tokens.$aspect,
  blur: tokens.$blur,
  radius: tokens.$radius,
  delay: tokens.$delay,
  duration: tokens.$duration,
  keyframes: tokens.$keyframes,
  layer: tokens.$layer,
  opacity: tokens.$opacity,
  screens: tokens.$screens,
  shadow: tokens.$shadow,
  spacing: tokens.$spacing,
  sizes: tokens.$sizes,
  timing: tokens.$timing,
  font-family: typography.$font-family,
  font-size: tokens.$font-size,
  font-weight: tokens.$font-weight,
  leading: tokens.$leading,
  tracking: tokens.$tracking,
  colors: $colors,
  gradients: tokens.$gradients,
  color-schemes: colors.$schemes,
);

$theme: () !default;
$theme: map.deep-merge($default-theme, $theme);
