// ------------------------------------
//   CSS Custom Props Generator (vars)
// ------------------------------------

@use 'sass:meta';
@use 'sass:string';

@use '../helpers/internal' as *;
@use '../helpers/color' as *;

// --------------------------------
//   Mixins
// --------------------------------

// Generate CSS vars from map.
@mixin generate-css-vars($map: (), $property: null) {
  @each $key, $value in $map {
    $value: if(meta.type-of($value) == 'string', string.unquote($value), $value);
    #{css-var-name($property, $key)}: $value;
  }
}

@mixin generate-css-color-vars($colors-map: (), $property: null, $suffix: null) {
  /*! purgecss start ignore */
  @each $color, $value in $colors-map {
    @if meta.type-of($value) == color {
      #{css-var-name($property, $color, $suffix)}: to-hsl($value);
    } @else {
      @each $shade, $shade-value in $value {
        #{css-var-name($property, '#{$color}-#{$shade}', $suffix)}: to-hsl($shade-value);
      }
    }

    // Accent
    .accent-#{'' + $color} {
      @if meta.type-of($value) == color {
        #{css-var-name($property, accent, $suffix)}: to-hsl($value);
      } @else {
        @each $shade, $shade-value in $value {
          #{css-var-name($property, 'accent-#{$shade}', $suffix)}: to-hsl($shade-value);
        }
      }
    }
  }
  /*! purgecss end ignore */
}

@mixin generate-color-schemes-css-vars($colors-map: (), $color-scheme: null) {
  /*! purgecss start ignore */
  @each $color, $value in $colors-map {
    @if meta.type-of($value) == color {
      #{css-var-name($color, $color-scheme)}: to-hsl($value);
    } @else {
      @each $shade, $shade-value in $value {
        $shade: if($color-scheme, '#{$shade}-#{$color-scheme}', $shade);
        #{css-var-name($color, $shade)}: to-hsl($shade-value);
      }
    }
  }
  /*! purgecss end ignore */
}
