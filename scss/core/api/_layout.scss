// -------------------------------------
//   Layout
// -------------------------------------

@use 'sass:map';
@use 'sass:meta';

@use 'theme' as *;
@use 'spacing' as *;
@use 'media-query' as mq;

// -------------------------------------
//   Mixins
// -------------------------------------

@mixin container($from: 0, $padding: null, $center: false, $max-width: true) {
  $from_width: if(mq.bp($from), mq.bp($from), $from);
  @include mq.from($from_width) {
    width: 100%;

    /* Set the max-width of the element to match the
      min-width of the current breakpoint */
    @if $max-width {
      @each $breakpoint, $width in theme(screens) {
        @include mq.from($breakpoint) {
          max-width: $width;
        }
      }
    }

    /* Center the element */
    @if $center {
      margin-left: auto;
      margin-right: auto;
    }

    /* Add padding to the container, either by value, by
      theme token or using responsive padding as fallback */
    @if $padding {
      @if theme-has-key(spacing, $padding) {
        padding-left: theme(spacing, $padding);
        padding-right: theme(spacing, $padding);
      } @else if meta.type-of($padding) == number {
        padding-left: $padding;
        padding-right: $padding;
      } @else {
        @include responsive-padding-inline;
      }
    }
  }
}

// Set the absolute position value of all four edges
@mixin inset($value) {
  top: $value;
  right: $value;
  bottom: $value;
  left: $value;
}

// Set the absolute position value of left and right
@mixin inset-x($value) {
  right: $value;
  left: $value;
}

// Set the absolute position value of top and bottom
@mixin inset-y($value) {
  top: $value;
  bottom: $value;
}
