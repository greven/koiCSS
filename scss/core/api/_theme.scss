// --------------------------------
//   Core API functions and mixins
// --------------------------------

@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';
@use 'sass:selector';

@use '../../theme' as *;
@use '../../config' as *;
@use '../helpers' as *;

// --------------------------------
//   Functions
// --------------------------------

// Get a value from the theme using
// fallbacks definied in the config
@function theme($keys...) {
  $property: list.nth($keys, 1);
  $fallback: config(fallbacks, $property);
  @return map-get-key($theme, $fallback, $keys...);
}

@function theme-has-key($keys...) {
  @return map.has-key($theme, $keys...);
}

// Checks if keys is a valid theme color
@function is-theme-color($keys...) {
  $colors: map.get($theme, colors);
  $value: map.get($colors, $keys...);

  @return map.has-key($colors, $keys...) and (meta.type-of($value) == color);
}

// Checks if keys is a valid scheme color
// (theme -> color-schemes)
@function is-scheme-color($keys...) {
  $color-schemes: theme(color-schemes);

  @each $color-scheme, $values in $color-schemes {
    @if map.has-key($values, $keys...) {
      @return true;
    }
  }
  @return false;
}

// --------------------------------
//   Mixins
// --------------------------------

// Match color scheme mode
@mixin color-mode($color-scheme: light) {
  @media (prefers-color-scheme: $color-scheme) {
    @at-root #{selector.nest(':root:not([data-theme=light]):not([color-scheme=light]):not([color-scheme=dark]):not([data-theme=dark])', &)} {
      @content;
    }
  }

  @at-root #{selector.nest(':root[data-theme=#{$color-scheme}], :root[color-scheme=#{$color-scheme}]', &)} {
    @content;
  }
}

// Matches data-theme="light" or data-theme="auto"
@mixin light() {
  @include color-mode(light) {
    @content;
  }
}

// Matches data-theme="dark" or data-theme="auto"
@mixin dark() {
  @include color-mode(dark) {
    @content;
  }
}
