// --------------------------------
//   Media Queries / Breakpoints
// --------------------------------

@use 'sass:map';
@use 'sass:list';

@use 'theme' as *;
@use '../helpers' as *;

// --------------------------------
//   FUNCTIONS
// --------------------------------

/// Return a breakpoint value from the theme
///
/// @param {string} $screen
///
/// @return {number} `$breakpoint-in-pixel`.
///
@function bp($screen) {
  @return theme(screens, $screen);
}

// Alias to bp function
@function screen($screen) {
  @return bp($screen);
}

// Minimum breakpoint width
@function min($key) {
  $min: bp($key);

  @return if($min != 0, $min, null);
}

// Maximum breakpoint width
@function max($key) {
  $max: bp($key);

  @return if($max and $max > 0, $max - 0.02, null);
}

// --------------------------------
//   MIXINS
// --------------------------------

@mixin query($query, $media-type: screen) {
  @media #{$media-type} and #{$query} {
    @content;
  }
}

/// Apply content from a specific breakpoint forward
/// This query is mobile first (from min-width).
///
/// @param {string} $breakpoint
///
/// @content - a min-width media query
///
@mixin mq($breakpoint, $media-type: screen) {
  @include from($breakpoint, $media-type) {
    @content;
  }
}

/// Apply content from a specific breakpoint forward
///
/// @param {string} $breakpoint
///
/// @content - a min-width media query
///
@mixin from($breakpoint, $media-type: screen) {
  @media #{$media-type} and (min-width: bp($breakpoint)) {
    @content;
  }
}

/// Apply content until a specific breakpoint is reached
///
/// @param {string} $breakpoint
///
/// @content - a max-width media query
///
@mixin to($breakpoint, $media-type: screen) {
  @media #{$media-type} and (max-width: bp($breakpoint)) {
    @content;
  }
}

/// Apply content between breakpoints
///
/// @param {string} $from - screen breakpoint from
/// @param {string} $to  - screen breakpoint to
///
/// @content - a min-width and max-width media query
///
@mixin between($from, $to, $media-type: screen) {
  @media #{$media-type} and (min-width: bp($from)) and (max-width: bp($to)) {
    @content;
  }
}

/// Apply content within the length of a specific breakpoint
///
/// @param {string} $breakpoint
///
/// @content - a min-width and/or max-width media query
///
@mixin at($breakpoint, $media-type: screen) {
  $keys: map.keys(theme(screens));
  $length: list.length(theme(screens));
  $index: list.index($keys, $breakpoint);

  @if $length > $index {
    $next-breakpoint: list.nth($keys, ($index + 1));

    @include between($breakpoint, $next-breakpoint, $media-type) {
      @content;
    }
  } @else {
    @include from($breakpoint, $media-type) {
      @content;
    }
  }
}

@mixin not($query, $media-type: screen) {
  @media not #{$media-type} and #{$query} {
    @content;
  }
}

@mixin orientation($value: landscape, $media-type: screen) {
  @media #{$media-type} and (orientation: $value) {
    @content;
  }
}

@mixin resolution($value, $media-type: screen) {
  @media #{$media-type} and (resolution: $value) {
    @content;
  }
}

@mixin min-resolution($value, $media-type: screen) {
  @media #{$media-type} and (min-resolution: $value) {
    @content;
  }
}

@mixin max-resolution($value, $media-type: screen) {
  @media #{$media-type} and (max-resolution: $value) {
    @content;
  }
}

@mixin aspect-ratio($value, $media-type: screen) {
  @media #{$media-type} and (aspect-ratio: $value) {
    @content;
  }
}

@mixin min-aspect-ratio($value, $media-type: screen) {
  @media #{$media-type} and (min-aspect-ratio: $value) {
    @content;
  }
}

@mixin max-aspect-ratio($value, $media-type: screen) {
  @media #{$media-type} and (max-aspect-ratio: $value) {
    @content;
  }
}

@mixin prefers-reduced-motion($bool: true) {
  $query: '(prefers-reduced-motion: reduce)';

  @if $bool {
    @include query($query) {
      @content;
    }
  } @else {
    @include not($query) {
      @content;
    }
  }
}

@mixin prefers-high-contrast($bool: true) {
  $query: '(prefers-contrast: high)';

  @if $bool {
    @include query($query) {
      @content;
    }
  } @else {
    @include not($query) {
      @content;
    }
  }
}

@mixin prefers-low-contrast($bool: true) {
  $query: '(prefers-contrast: low)';

  @if $bool {
    @include query($query) {
      @content;
    }
  } @else {
    @include not($query) {
      @content;
    }
  }
}

@mixin prefers-reduced-transparency($bool: true) {
  $query: '(prefers-reduced-transparency: reduce)';

  @if $bool {
    @include query($query) {
      @content;
    }
  } @else {
    @include not($query) {
      @content;
    }
  }
}
