// --------------------------------
//   Map helpers
// --------------------------------

@use 'sass:map';
@use 'sass:list';
@use 'sass:string';
@use 'sass:meta';

@function get-key($map: (), $fallback-key: null, $keys...) {
  @if list.length($keys) == 0 and $fallback-key {
    @if map.has-key($map, $fallback-key) {
      $value: map.get($map, $fallback-key);
      @if meta.type-of($value) == string {
        @return string.unquote($value);
      }
      @return $value;
    }

    @warn "Fallback key #{$fallback-key} not found in map.";
    @return $map;
  } @else if map.has-key($map, $keys...) {
    $value: map.get($map, $keys...);
    @if meta.type-of($value) == string {
      @return string.unquote($value);
    }
    @return $value;
  }

  @error "Key(s) [#{$keys}] doesn't exist and there is no fallback.";
}

// Multiple map merge
@function merge($maps...) {
  $collection: ();
  @each $map in $maps {
    $collection: map.merge($collection, $map);
  }
  @return $collection;
}

// Multiple map deep-merge
@function deep-merge($maps...) {
  $collection: ();
  @each $map in $maps {
    $collection: map.deep-merge($collection, $map);
  }
  @return $collection;
}

// Filter elements in $map where the key equals $condition
@function filter($map, $condition) {
  $filtered: ();
  @each $key, $value in $map {
    @if $value == $condition {
      $filtered: map.merge(
        $filtered,
        (
          $key: $value,
        )
      );
    }
  }
  @return $filtered;
}
