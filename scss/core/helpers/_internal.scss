// --------------------------------
//   Internal helpers
// --------------------------------

@use 'sass:color';
@use 'sass:string';
@use 'sass:meta';

@use '../api/config' as *;
@use 'string' as *;
@use 'color' as *;

// --------------------------------
//   Functions
// --------------------------------

// CSS Vars

/* Return the prefix of the css vars if configured */
@function -css-var-prefix($prefix: config(prefix)) {
  $prefix: if($prefix == '', '', '#{$prefix}-');
  @return $prefix;
}

/* Returns the css custom property */
@function -css-var-name($name, $key: null, $suffix: null) {
  $prefix: -css-var-prefix();
  $suffix: if($suffix, '-#{$suffix}', '');
  $key: if($name and $key, '-#{$key}', $key);

  @return '--#{$prefix}#{$name}#{$key}#{$suffix}';
}

/* A wrapper for var() that prefixes the custom property
  name if configured.
  Example: css-var(--c-green-5) -> var(--koi-c-green-5) */
@function css-var($name, $fallback: null) {
  $name: replace($name, '--', '');
  $var-name: string.unquote(-css-var-name($name));
  @if $fallback {
    @return var($var-name, $fallback);
  }
  @return var($var-name);
}

// --------------------------------
//   Mixins
// --------------------------------

// Output a CSS custom property (CSS var) definition
@mixin custom-prop($property, $key, $value) {
  $value: if(meta.type-of($value) == 'string', string.unquote($value), $value);
  #{-css-var-name($property, $key)}: $value;
}

// Output a CSS custom property (CSS var) color definition
@mixin color-custom-prop($property, $color-name: null, $value, $suffix: null) {
  @if meta.type-of($value) == 'color' {
    #{-css-var-name($property, $color-name, $suffix)}: $value;
  } @else {
    @each $shade, $shade-value in $value {
      $key: if($color-name and $shade, '#{$color-name}-#{$shade}', $shade);
      #{-css-var-name($property, $key, $suffix)}: $shade-value;
    }
  }
}

// Output a CSS custom property (CSS var) hsl color definition
@mixin hsl-color-custom-prop($property, $color-name: null, $value, $suffix: null) {
  @if meta.type-of($value) == 'color' {
    $hsl-color: to-hsl($value);

    #{-css-var-name($property, $color-name, h)}: hue($hsl-color);
    #{-css-var-name($property, $color-name, s)}: saturation($hsl-color);
    #{-css-var-name($property, $color-name, l)}: lightness($hsl-color);

    #{-css-var-name($property, $color-name, $suffix)}: hsl(
      css-var(-css-var-name($property, $color-name, h)),
      css-var(-css-var-name($property, $color-name, s)),
      css-var(-css-var-name($property, $color-name, l))
    );
  } @else {
    @each $shade, $shade-value in $value {
      $hsl-color: to-hsl($shade-value);
      $key: if($color-name and $shade, '#{$color-name}-#{$shade}', $shade);

      #{-css-var-name($property, $key, h)}: hue($hsl-color);
      #{-css-var-name($property, $key, s)}: saturation($hsl-color);
      #{-css-var-name($property, $key, l)}: lightness($hsl-color);

      #{-css-var-name($property, $key, $suffix)}: hsl(
        css-var(-css-var-name($property, $key, h)),
        css-var(-css-var-name($property, $key, s)),
        css-var(-css-var-name($property, $key, l))
      );
    }
  }
}
