// --------------------------------
//   Color Helpers
// --------------------------------

// Note: Remove if SASS adds support for CSS Color Modules Level 4 & Level 5
@forward '@oddbird/blend';

@use 'sass:color';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:string';

@use 'string' as str;

// --------------------------------
//   Functions
// --------------------------------

// Convert color to hsl
@function to-hsl($color, $alpha: 1) {
  @if type-of($color) == 'color' {
    @return hsla(color.hue($color), color.saturation($color), color.lightness($color), $alpha);
  } @else {
    @error "#{$color} is not a valid color object!";
  }
}

// Convert color to rgb
@function to-rgb($color, $alpha: 1) {
  @if type-of($color) == 'color' {
    @return rgba(color.red($color), color.green($color), color.blue($color), $alpha);
  } @else {
    @error "#{$color} is not a valid color object!";
  }
}

// Convert an hexadecimal number to a decimal number
// Source: KittyGiraudel - SassyJSON
@function hex-to-dec($string) {
  $hex: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'a' 'b' 'c' 'd' 'e' 'f';
  $string: string.to-lower-case($string);
  $length: string.length($string);

  $dec: 0;
  @for $i from 1 through $length {
    $factor: 1 + (15 * ($length - $i));
    $index: list.index($hex, string.slice($string, $i, $i));
    $dec: $dec + $factor * ($index - 1);
  }

  @return $dec;
}

// Parse an hex string into an rgb color
// Source: KittyGiraudel - SassyJSON
@function hex-str-to-rgb($string) {
  $hex: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'a' 'b' 'c' 'd' 'e' 'f';
  $string-lower: string.to-lower-case($string);
  $length: string.length($string);
  $max: if($length == 4, 1, 2);
  $r: '';
  $g: '';
  $b: '';

  // Check for length accuracy
  @if $length != 4 and $length != 7 {
    @return $string;
  }

  // Loop from the second character (omitting #)
  @for $i from 2 through $length {
    $c: string.slice($string-lower, $i, $i);

    // If wrong character, return
    @if list.index($hex, $c) == null {
      @return $string;
    }

    @if string.length($r) < $max {
      $r: $r + $c;
    } @else if string.length($g) < $max {
      $g: $g + $c;
    } @else if string.length($b) < $max {
      $b: $b + $c;
    }
  }

  @if $length == 4 {
    $r: $r + $r;
    $g: $g + $g;
    $b: $b + $b;
  }

  @return rgb(hex-to-dec($r), hex-to-dec($g), hex-to-dec($b));
}

// Given a color object or a CSS custom prop color
// change its alpha value.
@function change-alpha($color, $alpha: 1) {
  @if type-of($color) == 'color' {
    @return color.change($color, $alpha: $alpha);
  } @else {
    $color-name: str.replace($color, 'var(');
    $color-name: str.replace($color-name, ')');

    $color-vars: str.split($color-name, ',');
    $color-name: list.nth($color-vars, 1);

    $fallback-color-hue: '';
    $fallback-color-saturation: '';
    $fallback-color-lightness: '';

    /* If we have a second element in color-vars it
    it means the var has a fallback, as in: var(--name, fallback) */
    @if list.length($color-vars) == 2 {
      $fallback-color: list.nth($color-vars, 2);

      @if meta.type-of($fallback-color) == 'color' {
        $fallback-color: rgb($fallback-color);
      } @else if meta.type-of($fallback-color) == 'string' {
        $fallback-color: hex-str-to-rgb($fallback-color);
      } @else {
        $fallback-color: null;
      }

      @if $fallback-color {
        $fallback-color-hue: color.hue($fallback-color);
        $fallback-color-saturation: color.saturation($fallback-color);
        $fallback-color-lightness: color.lightness($fallback-color);
      }
    }

    $color-h: var(#{$color-name + '-h'}, $fallback-color-hue);
    $color-s: var(#{$color-name + '-s'}, $fallback-color-saturation);
    $color-l: var(#{$color-name + '-l'}, $fallback-color-lightness);

    @return hsla($color-h, $color-s, $color-l, $alpha);
  }
}
