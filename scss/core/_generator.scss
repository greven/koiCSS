// --------------------------------
//   Generators
// --------------------------------

@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';
@use 'sass:string';
@use 'modules/media-query' as mq;
@use 'helpers' as *;
@use 'api' as *;

// --------------------------------
//   Utilities
// --------------------------------

/* stylelint-disable max-nesting-depth */
@mixin utility-class($utility, $breakpoint: null) {
  $prefix: config(prefix) + '-';
  $util-glue: config(utility-glue);
  $values: map.get($utility, values);

  // If the values are a list or string, convert it into a map
  @if meta.type-of($values) == 'string' or meta.type-of(list.nth($values, 1)) != 'list' {
    $values: list.zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map.get($utility, property);

    $property-class: if(map.has-key($utility, class), map.get($utility, class), list.nth($properties, 1));
    $property-class: if($property-class == null, $key, $property-class);
    $property-class: str-escape($property-class);

    $local-vars: map-get($utility, local-vars);

    @if $value != null {
      @if meta.type-of($value) == 'string' {
        $value: string.unquote($value);
      }

      $infix: '';
      @if $breakpoint {
        $infix: if(mq.min($breakpoint) == null, '', str-escape(#{'' + $breakpoint + $util-glue}));
      }

      @each $property in $properties {
        @if $property and $value {
          .#{$infix + $property-class} {
            @if $local-vars {
              @each $local-var, $variable in $local-vars {
                --#{$prefix}#{$local-var}: #{$variable};
              }
            }

            #{$property}: $value;
          }
        }
      }
    }
  }
}
/* stylelint-enable */

@mixin generate-utilities($utilities) {
  // Generate standard utilities first
  @each $key, $utility in $utilities {
    @include utility-class($utility);
  }

  // Maybe generate responsive utilities
  @each $breakpoint, $-value in theme(screens) {
    @include mq.from($breakpoint) {
      @each $key, $utility in $utilities {
        @if map.get($utility, responsive) {
          @include utility-class($utility, $breakpoint);
        }
      }
    }
  }
}

// --------------------------------
//   CSS Custom Properties (vars)
// --------------------------------

// Returns the css custom property name given the property and key
@function css-var-name($property, $key) {
  $prefix: if(config(prefix) == '', '', '#{config(prefix)}-');
  @return '--#{$prefix}#{$property}-#{$key}';
}

@mixin generate-css-vars() {
  :where(html) {
    // TODO: Create a css-property function
    --prefix-property: 69;
  }
}

// --------------------------------
//   Keyframes
// --------------------------------

@mixin generate-keyframes() {
  /*! purgecss start ignore */
  @each $keyframe-key, $keyframe-value in theme(keyframes) {
    @keyframes #{$keyframe-key} {
      @each $keyframe-timestamp, $keyframe-property in $keyframe-value {
        #{$keyframe-timestamp} {
          @each $keyframe-transform-property, $keyframe-property-value in $keyframe-property {
            #{$keyframe-transform-property}: #{$keyframe-property-value};
          }
        }
      }
    }
  }
  /*! purgecss end ignore */
}
