@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

@use '../config';
@use '../internal' as *;
@use '../helpers' as *;
@use 'theme' as *;

// --------------------------------
//   Vars
// --------------------------------

$_default-shade: config.default(color-shade);

// --------------------------------
//   Functions
// --------------------------------

// Try to return a theme color if not fallback to a color value if valid
@function fill(
  $color,
  $shade: $_default-shade,
  $alpha: 1,
  $saturation: null,
  $lightness: null,
  $complement: false,
  $invert: false
) {
  // Check if name is in format color-shade
  @if meta.type-of($color) == 'string' {
    $name-parts: _maybe-parse-string-color($color);

    @if $name_parts {
      $color: list.nth($name-parts, 1);
      $shade: list.nth($name-parts, 2);
    }
  }

  @if is-theme-color($color, $shade) or is-scheme-color($color, $shade) {
    @return hsl-color-var($color, $shade, $alpha, $saturation, $lightness, $complement, $invert);
  } @else if is-theme-color($color) or is-scheme-color($color) {
    @return hsl-color-var(
      $color,
      $alpha: $alpha,
      $saturation: $saturation,
      $lightness: $lightness,
      $complement: $complement,
      $invert: $invert
    );
  } @else if $color == 'accent' {
    @return hsl-color-var(
      accent-#{$shade},
      $alpha: $alpha,
      $saturation: $saturation,
      $lightness: $lightness,
      $complement: $complement,
      $invert: $invert
    );
  } @else if meta.type-of($color) == 'color' {
    @return $color;
  } @else {
    @error "Color #{$color} / #{$shade} not found in theme.";
  }
}

// Return an RGB theme color value (compile time)
@function color($name, $shade: $_default-shade, $alpha: 1) {
  @if is-theme-color($name, $shade) {
    @return to-rgb(theme(colors, $name, $shade), $alpha);
  } @else if is-theme-color($name) {
    @return to-rgb(theme(colors, $name), $alpha);
  } @else {
    @error "Color #{$name} or #{$name}-#{$shade} not found in theme.";
  }
}

@function accent(
  $shade: $_default-shade,
  $alpha: 1,
  $saturation: null,
  $lightness: null,
  $complement: false,
  $invert: false
) {
  @return fill(
    accent,
    $shade: $shade,
    $alpha: $alpha,
    $saturation: $saturation,
    $lightness: $lightness,
    $complement: $complement,
    $invert: $invert
  );
}

// Return an RGB theme color value (compile time) in channels (triplet) format
@function color-channels($name, $shade: $_default-shade) {
  $color: color($name, $shade);
  @return rgb-channels($color);
}

// Parse a theme color in string form (i.e., text-1)
// returning its name and shade or null
@function _maybe-parse-string-color($name) {
  @if meta.type-of($name) != 'string' {
    @return null;
  }

  $name-parts: str-split($name, '-');

  @if meta.type-of($name-parts) == 'list' and list.length($name-parts) == 2 {
    $_name: list.nth($name-parts, 1);
    $_shade: to-number(list.nth($name-parts, 2));

    @if is-theme-color($_name, $_shade) or is-scheme-color($_name, $_shade) {
      @return $_name $_shade;
    }
  }

  @return null;
}

// --------------------------------
//   Support Vars
// --------------------------------

$_base-colors: ();
$_scheme-colors: ();

@each $color-name, $color in theme(colors) {
  @if meta.type-of($color) == 'color' {
    $_base-colors: map.set($_base-colors, #{$color-name}, fill($color-name, $color));
  } @else {
    @each $shade, $_value in $color {
      $_base-colors: map.set($_base-colors, #{$color-name}-#{$shade}, fill($color-name, $shade));
    }
  }
}

@each $color-name, $color in theme(color-schemes, light) {
  @if meta.type-of($color) == 'color' {
    $_scheme-colors: map.set($_scheme-colors, #{$color-name}, fill($color-name, $color));
  } @else {
    @each $shade, $_value in $color {
      $_scheme-colors: map.set($_scheme-colors, #{$color-name}-#{$shade}, fill($color-name, $shade));
    }
  }
}

$merged-colors: map.merge($_base-colors, $_scheme_colors);
