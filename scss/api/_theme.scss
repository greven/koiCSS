// --------------------------------
//   Theme API
// --------------------------------

@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:selector';

@use '../config';
@use '../config/internal' as *;
@use '../internal' as *;
@use '../helpers' as *;

// --------------------------------
//   Functions
// --------------------------------

// Get a value from the theme using or a
// default value if definied in the config
@function theme($keys...) {
  $property: list.nth($keys, 1);
  $fallback: config.default($property);
  @return map-get-key(config.$theme, $fallback, $keys...);
}

@function theme-has-key($keys...) {
  @return map.has-key(config.$theme, $keys...);
}

// Try to return a theme value or fallback to the value
@function theme-or-fallback($property, $key_or_value) {
  @if theme-has-key($property, $key_or_value) {
    @return theme($property, $key_or_value);
  } @else {
    @return $key_or_value;
  }
}

// Checks if keys is a valid theme color
@function is-theme-color($keys...) {
  $colors: map.get(config.$theme, colors);
  $value: map.get($colors, $keys...);

  @return map.has-key($colors, $keys...) and (meta.type-of($value) == color);
}

// Checks if keys is a valid scheme color
// (theme -> color-schemes)
@function is-scheme-color($keys...) {
  $color-schemes: theme(color-schemes);

  @each $color-scheme, $values in $color-schemes {
    @if map.has-key($values, $keys...) {
      @return true;
    }
  }
  @return false;
}

@function is-color-scheme-enabled($color-scheme) {
  $color-schemes: config.$color-schemes;
  @return to-bool(list.index($color-schemes, $color-scheme));
}

// --------------------------------
//   Mixins
// --------------------------------

// ---- Color Schemes Generation ----

@mixin generate-scheme-css-vars($colors-map: (), $color-scheme: null, $suffix: null) {
  @each $color-name, $value in $colors-map {
    @include color-custom-prop($color-prefix, $color-name, $value, $color-scheme);
  }
}

@mixin generate-color-scheme($color-schemes-map, $color-scheme) {
  --color-mode: #{$color-scheme};
  @include generate-scheme-css-vars($color-schemes-map);
  color-scheme: $color-scheme;
}

@mixin _default-color-scheme($color-schemes-map) {
  $default-color-scheme: light;
  $default-color-schemes-map: map.get($color-schemes-map, $default-color-scheme);

  html {
    @include generate-color-scheme($default-color-schemes-map, $default-color-scheme);
  }
}

// Create color scheme colors (dark, light, ...)
@mixin color-scheme($color-schemes-map, $color-scheme) {
  $color-schemes-map: map.get($color-schemes-map, $color-scheme);

  @if is-color-scheme-enabled($color-scheme) {
    @media (prefers-color-scheme: $color-scheme) {
      html {
        @include generate-color-scheme($color-schemes-map, $color-scheme);
      }
    }

    [color-scheme='#{$color-scheme}'],
    [data-theme='#{$color-scheme}'] {
      @include generate-color-scheme($color-schemes-map, $color-scheme);
    }
  }
}

// Output color vars for each color-scheme
@mixin create-themes($color-schemes-map) {
  @include _default-color-scheme($color-schemes-map);

  @each $color-scheme, $_color in $color-schemes-map {
    @include color-scheme($color-schemes-map, $color-scheme);
  }
}

// ---- Helpers ----

// Match color scheme mode
@mixin color-mode($color-scheme: light) {
  @if is-color-scheme-enabled($color-scheme) {
    @media (prefers-color-scheme: $color-scheme) {
      @at-root #{selector.nest(':root:not([data-theme=light]):not([color-scheme=light]):not([color-scheme=dark]):not([data-theme=dark])', &)} {
        @content;
      }
    }

    @at-root #{selector.nest(':root[data-theme=#{$color-scheme}], :root[color-scheme=#{$color-scheme}]', &)} {
      @content;
    }
  }
}

// Matches data-theme="light" or data-theme="auto"
@mixin light-mode() {
  @include color-mode(light) {
    @content;
  }
}

// Matches data-theme="dark" or data-theme="auto"
@mixin dark-mode() {
  @include color-mode(dark) {
    @content;
  }
}

// Sets a property value depending on the color mode (light or dark).
// It takes 3 arguments: the property, the value in light mode, and the value in dark mode.
@mixin use-color-mode($property, $light-value, $dark-value) {
  @include light-mode {
    #{$property}: $light-value;
  }

  @include dark-mode {
    #{$property}: $dark-value;
  }
}
