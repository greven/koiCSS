// --------------------------------
//   Typography helpers
// --------------------------------

@use 'sass:map';
@use 'sass:math';
@use 'sass:list';
@use 'sass:string';

@use '../helpers' as *;
@use 'setting' as *;
@use 'theme' as *;

// --------------------------------
//   Values
// --------------------------------

$_default-font-family: setting(fallbacks, font-family);
$_default-font-size: setting(fallbacks, font-size);
$_default-font-weight: setting(fallbacks, font-weight);
$_default-leading: setting(fallbacks, leading);
$_default-tracking: setting(fallbacks, tracking);

// --------------------------------
//   Functions
// --------------------------------

// Get theme font-family
@function font-family($font-family: $_default-font-family) {
  @return theme(font-family, $font-family);
}

// Get theme font-size or fallback to value
@function font-size($font-size: $_default-font-size) {
  @if theme-has-key(font-size, $font-size) {
    @return list.nth(theme(font-size, $font-size), 1);
  } @else if is-unit($font-size) {
    @return $font-size;
  } @else {
    @error "[#{$font-size}] does not exist in the theme!";
  }
}

@function fluid-font-size($min-font-size, $max-font-size, $preferred-font-size: setting(typography, fluid-font-size)) {
  $min-font-size: if(theme-has-key(font-size, $min-font-size), font-size($min-font-size), $min-font-size);
  $max-font-size: if(theme-has-key(font-size, $max-font-size), font-size($max-font-size), $max-font-size);

  @return clamp(
    var(--koi-fluid-min-font-size, $min-font-size),
    var(--koi-fluid-preferred-font-size, string.unquote($preferred-font-size)),
    var(--koi-fluid-max-font-size, $max-font-size)
  );
}

// Get theme font-weight or fallback to value
@function font-weight($font-weight: $_default-font-weight) {
  @return theme-or-fallback(font-weight, $font-weight);
}

// Get font-family, font-size or font-weight theme values
@function font($key) {
  @if theme-has-key(font-family, $key) {
    @return font-family($key);
  } @else if theme-has-key(font-size, $key) {
    @return font-size($key);
  } @else if theme-has-key(font-weight, $key) {
    @return font-weight($key);
  } @else {
    @error "[#{$key}] does not exist in the theme!";
  }
}

// Get theme leading (line-height) or fallback to value
@function leading($leading: $_default-leading) {
  @return theme-or-fallback(leading, $leading);
}

// Leading alias
@function line-height($leading: $_default-leading) {
  @return leading($leading);
}

// Get theme tracking (letter-spacing) or fallback to value
@function tracking($tracking: $_default-tracking) {
  @return theme-or-fallback(tracking, $tracking);
}

// Tracking alias
@function letter-spacing($tracking: $_default-tracking) {
  @return tracking($tracking);
}

// Leading (line-height) by font-size
@function text-leading($font-size) {
  @return list.nth(theme(font-size, $font-size), 2);
}

// --------------------------------
//   Mixins
// --------------------------------

// Font-size with default line-height
@mixin font-size($font-size: $_default-font-size) {
  font-size: font-size($font-size);
}

// Font-size with default leading (line-height)
@mixin text-size($font-size: $_default-font-size) {
  font-size: font-size($font-size);
  line-height: text-leading($font-size);
}

// Applies antialiasing via font-smoothing to text.
@mixin smooth-font {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

// Sets text content overflow to ellipsis
// Element must be `display: block` or `display: inline-block` for this to work.
@mixin overflow-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Mixin helper to define a font-face
// Example: @include font-face('Tobias Light', 'fonts/Tobias-Light', $family: Tobias, $weight: 300);
@mixin font-face(
  $name,
  $path,
  $family: null,
  $weight: 400,
  $style: normal,
  $display: swap,
  $exts: eot woff2 woff ttf svg,
  $extra: null
) {
  $family: if($family, string.quote($family), string.quote($name));

  $formats: (
    eot: 'embedded-opentype',
    otf: 'opentype',
    ttf: 'truetype',
  );

  $src: (local($name), local(str-replace($name, ' ', '-')));
  @each $ext in $exts {
    $extension: if($ext == svg, $ext + '#' + str-replace($name, ' ', '_'), $ext);
    $format: if(map.has-key($formats, $ext), map.get($formats, $ext), $ext);
    $src: list.append(
      $src,
      url("#{string.quote($path + '.' + $extension)}") format(string.quote($format)),
      $separator: comma
    );
  }

  @font-face {
    font-display: $display;
    font-family: $family;
    font-style: $style;
    font-weight: $weight;
    src: $src;
    @each $key, $value in $extra {
      #{$key}: $value;
    }
  }
}
