// -------------------------------------
//   Layout API
// -------------------------------------

@use 'sass:math';
@use 'sass:meta';

@use 'border' as *;
@use 'color' as *;
@use 'media-query' as *;
@use 'size' as *;
@use 'spacing' as *;
@use 'shadow' as *;
@use 'theme' as *;

// -------------------------------------
//   Mixins
// -------------------------------------

// Basic box element with theme defaults that can be composed with other utilities.
// Based on https://smolcss.dev/#smol-unbreakable-boxes */
@mixin box(
  $max-width: 100%,
  $color: fill(text, 1),
  $bg-color: fill(surface, 2),
  $padding: null,
  $rounded: null,
  $shadow: null
) {
  background-color: $bg-color;
  color: $color;
  hyphens: auto;
  word-break: break-word;

  @if $max-width {
    @if theme-has-key(sizes, $max-width) {
      width: size($max-width);
    } @else if meta.type-of($max-width) == number and not math.is-unitless($max-width) {
      width: $max-width;
    } @else {
      @error "#{$max-width} is not a valid value.";
    }
  }

  // Add padding to the element, either by value, by
  // theme token or using responsive padding as fallback
  @if $padding {
    @if theme-has-key(spacing, $padding) {
      padding-left: theme(spacing, $padding);
      padding-right: theme(spacing, $padding);
    } @else if meta.type-of($padding) == number and not math.is-unitless($padding) {
      padding-left: $padding;
      padding-right: $padding;
    } @else {
      @include fluid-padding;
    }
  }

  @if $rounded {
    @if theme-has-key(radius, $rounded) {
      @include rounded($rounded);
    } @else if meta.type-of($rounded) == bool {
      @include rounded();
    } @else {
      border-radius: $rounded;
    }
  }

  @if $shadow {
    @if theme-has-key(shadow, $shadow) {
      @include shadow($shadow);
    } @else if meta.type-of($shadow) == bool {
      @include shadow();
    } @else {
      box-shadow: $shadow;
    }
  }
}

@mixin container($from: xl, $padding: false, $center: false, $max-width: true) {
  $from-width: if(bp($from), bp($from), $from);

  width: 100%;

  /* Center the element */
  @if $center {
    margin-left: auto;
    margin-right: auto;
  }

  // Add padding to the container, either by value, by
  // theme token or using responsive padding as fallback
  @if $padding {
    @if theme-has-key(spacing, $padding) {
      padding-left: theme(spacing, $padding);
      padding-right: theme(spacing, $padding);
    } @else if meta.type-of($padding) == number {
      padding-left: $padding;
      padding-right: $padding;
    } @else {
      @include fluid-padding-inline;
    }
  }

  @if $max-width {
    // Set the max-width of the element to match the
    // min-width of the current breakpoint
    @if meta.type-of($max-width) == bool {
      @include mq-from($from-width) {
        @each $breakpoint, $width in theme(screens) {
          @include mq-from($breakpoint) {
            max-width: $width;
          }
        }
      }
      // If $max-width matches a screen size set it
      // to that breakpoint value
    } @else if bp($max-width) {
      @include mq-from($from-width) {
        max-width: bp($max-width);
      }
      // As fallback set $max-width to the passed value
    } @else if not math.is-unitless($max-width) {
      @include mq-from($from-width) {
        max-width: $max-width;
      }
    } @else {
      @error "Please set a valid $max-width value.";
    }
  }
}

@mixin stack($direction: row, $spacer: md, $reverse: false) {
  $direction: if($reverse, #{$direction}-reverse, $direction);
  $spacer: if(theme-has-key(spacing, $spacer), spacing($spacer), $spacer);

  display: flex;
  flex-direction: $direction;
  justify-content: flex-start;
  @if $direction == row {
    align-items: center;
  } @else {
    align-items: initial;
  }

  * {
    @if $direction == row {
      margin-bottom: 0;
      margin-top: 0;
    } @else {
      margin-left: 0;
      margin-right: 0;
    }
  }

  * + * {
    @if $direction == row {
      @if $reverse {
        margin-left: 0;
        margin-right: var(--koi-spacer, $spacer);
      } @else {
        margin-left: var(--koi-spacer, $spacer);
        margin-right: 0;
      }
    } @else {
      @if $reverse {
        margin-bottom: var(--koi-spacer, $spacer);
        margin-top: 0;
      } @else {
        margin-bottom: 0;
        margin-top: var(--koi-spacer, $spacer);
      }
    }
  }
}

@mixin even-columns($width: 300px, $gap: md) {
  $gap: if(theme-has-key(spacing, $gap), spacing($gap), $gap);

  display: grid;
  gap: $gap;
  grid-template-columns: repeat(auto-fill, minmax(min($width, 100%), 1fr));
}

@mixin inset($value) {
  bottom: $value;
  left: $value;
  right: $value;
  top: $value;
}

@mixin inset-x($value) {
  left: $value;
  right: $value;
}

@mixin inset-y($value) {
  bottom: $value;
  top: $value;
}
