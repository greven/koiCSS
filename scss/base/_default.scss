// --------------------------------
//   Default Styles
// --------------------------------

@use '../config';
@use '../api' as *;

// --------------------------------
//   Styles
// --------------------------------

@mixin styles {
  /*! purgecss start ignore */
  ::selection {
    background-color: var(--um-selection-background, accent(1));
    color: var(--um-selection-foreground, fill(black));
  }

  *,
  ::after,
  ::before {
    border: 0 solid fill(brd, 1);
  }

  body {
    background-color: var(--um-body-background, fill(srf, 0));
    color: var(--um-body-foreground, fill(txt, 1));
    font-family: font(base);
    font-size: font(md);
    font-weight: font(normal);
    line-height: leading(normal);

    @if setting(use-font-smoothing) {
      @include smooth-font;
    }

    :focus-visible {
      outline: fill(primary) auto 1px;
      outline-color: fill(primary);
    }
  }

  sub,
  sup {
    font-size: 0.75em;
    position: relative;
  }

  sub {
    bottom: -0.25em;
    left: 0.25em;
  }

  sup {
    left: 0.25em;
    top: -0.5em;
  }

  pre,
  code {
    font-family: font(mono);
    font-size: font(sm);
  }

  pre {
    @include fluid-padding;
    @include rounded;
    background-color: var(--um-code-background, fill(black));
    color: fill(grey, 0);
    overflow-x: auto;
    position: relative;
  }

  code {
    background-color: var(--um-code-background, fill(black));
    border-radius: radius(config.$inline-text-border-radius);
    color: var(--um-code-foreground, fill(grey, 0));
    padding: config.$inline-text-padding;
  }

  code::before {
    color: fill(txt, 4);
    content: attr(data-lang);
    font-size: font(xs);
    position: absolute;
    right: 1rem;
    top: 0.7rem;
  }

  blockquote {
    background-color: var(--um-quote-background, fill(srf, 2));
    border-left-color: var(--um-quote-border-color, accent(5));
    border-left-width: var(--um-quote-border-with, 0.25rem);
    border-radius: var(--um-quote-border-radius, 3px);
    color: var(--um-quote-foreground, fill(txt, 1));
    font-style: italic;
    font-weight: font(medium);
    margin-bottom: 1.6em;
    margin-top: 1.6em;
    padding: 1.5em 2em;

    p:first-of-type {
      margin-top: 0;

      &::before {
        content: open-quote;
      }
    }

    p:last-of-type {
      margin-bottom: 0;

      &::after {
        content: close-quote;
      }
    }
  }

  cite {
    color: var(--um-cite-foreground, fill(txt, 2));
    display: block;
    font-size: font(sm);
    overflow: hidden;
    text-overflow: ellipsis;
  }

  figure > blockquote {
    @include rounded-bottom(0);
    margin-bottom: 0;
  }

  figure > blockquote + figcaption {
    @include rounded-bottom(var(--um-quote-border-radius, 3px));
    background-color: var(--um-quote-background, fill(srf, 2));
    border-left-color: var(--um-quote-border-color, accent(5));
    border-left-width: var(--um-quote-border-with, 0.25rem);
    color: var(--um-quote-foreground, fill(txt, 1));
    margin-top: -0.5em;
    padding: 0 2em 1.5em;
    text-align: left;
  }

  abbr[title] {
    border-bottom: 1px dotted;
    cursor: help;
    text-decoration: none;
  }

  mark {
    background: var(--um-mark-background, hsl(50 100% 85%));
    border-radius: radius(config.$inline-text-border-radius);
    color: var(--um-mark-foreground, fill(black));
    padding: config.$inline-text-padding;
  }

  img {
    height: auto;
    user-select: none;
  }

  iframe {
    height: 100%;
    width: 100%;
  }

  figure {
    margin-left: 0;
    margin-right: 0;

    figcaption {
      margin-top: spacing(8);
      text-align: center;
    }
  }

  // Forms
  [type='date'],
  [type='datetime'],
  [type='datetime-local'],
  [type='email'],
  [type='month'],
  [type='number'],
  [type='password'],
  [type='search'],
  [type='tel'],
  [type='text'],
  [type='time'],
  [type='url'],
  [type='week'],
  textarea,
  select {
    font-size: 1rem;
    line-height: 1.5;
    padding: 0.5em 0.75em;
  }

  [type='checkbox'],
  [type='radio'] {
    height: 1em;
    width: 1em;

    &:checked {
      background-color: currentColor;
      background-position: center;
      background-repeat: no-repeat;
      background-size: 100% 100%;
      border-color: transparent;
    }
  }

  [type='checkbox'] {
    &:checked {
      background-image: svg-encode(
        '<svg viewBox="0 0 16 16" fill="white" xmlns="http://www.w3.org/2000/svg"><path d="M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z"/></svg>'
      );
    }
  }

  [type='radio'] {
    border-radius: 9999px;

    &:checked {
      background-image: svg-encode(
        '<svg viewBox="0 0 16 16" fill="white" xmlns="http://www.w3.org/2000/svg"><circle cx="8" cy="8" r="3"/></svg>'
      );
    }
  }

  select {
    background-image: svg-encode(
      '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 16"><path stroke="#{theme(colors, grey, 5)}" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2 5l6 6 6-6" /></svg>'
    );
    background-position: right 0.75em center;
    background-repeat: no-repeat;
    background-size: 16px 12px;
  }
  /*! purgecss end ignore */
}

// --------------------------------
//   CSS Custom Properties
// --------------------------------

@mixin vars {
  *,
  ::before,
  ::after {
    --um-translate-x: 0;
    --um-translate-y: 0;
    --um-rotate: 0;
    --um-skew-x: 0;
    --um-skew-y: 0;
    --um-scale-x: 1;
    --um-scale-y: 1;
    --um-shadow: 0 0 #0000;
    --um-ring-shadow: 0 0 #0000;
    --um-ring-color: #{accent(5)};
    --um-ring-width: 2px;
    --um-ring-offset-shadow: 0 0 #0000;
    --um-ring-offset-color: #{fill(srf, 1)};
    --um-ring-offset: 2px;
    --um-ring-inset: ;
  }
}
