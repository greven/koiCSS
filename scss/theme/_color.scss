// --------------------------------------
//   Theme Color helpers and generators
// --------------------------------------

@use 'sass:map';
@use 'sass:list';
@use 'sass:color';
@use 'sass:math';

@use '../core/helpers' as *;
@use '../tokens' as *;

// Note: Remove if if/when SASS supports CSS Color Modules Level 4 & Level 5
@use '@oddbird/blend';

// --------------------------------
//   Functions
// --------------------------------

$num-color-shades: 10;

@function create-theme-color-steps($slope: 0.9) {
  $r: 100 * ($slope - math.div(1, $num-color-shades));
  $step: math.div($r, $num-color-shades - 1);
  $range-start: (100 - $r) * 0.5;
  $range-end: $range-start + $num-color-shades * $step;

  $range: ();
  $v: $range-start;
  @while $v < $range-end {
    $range: list-prepend($range, $v);
    $v: $v + $step;
  }

  @return $range;
}

$color-steps: create-theme-color-steps();

@function calculate-theme-color-offset($color) {
  $lightness: blend.lightness($color);
  $offset: 9999;

  @for $i from 1 through $num-color-shades {
    $diff: $lightness - list.nth($color-steps, $i);
    @if math.abs($diff) < math.abs($offset) {
      $offset: $diff;
    }
  }
  @return $offset;
}

@function create-theme-color($color) {
  $lightness: blend.lightness($color);
  $offset: calculate-theme-color-offset($color);

  $map: ();
  @for $i from 0 to $num-color-shades {
    $lightness: list.nth($color-steps, $i + 1) + $offset;
    $desaturation: math.pow(math.abs(math.round(math.div($num-color-shades, 2)) - $i), 2) * 1%;

    $c: blend.set($color, $lightness: $lightness);
    $c: color.adjust($c, $saturation: -$desaturation);

    $map: map.merge(
      $map,
      (
        $i: $c,
      )
    );
  }
  @return $map;
}
