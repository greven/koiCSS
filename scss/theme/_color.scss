// -------------------------------------
//   Color Schemes
// ------------------------------------

@use 'sass:map';

@use '../core/helpers/internal' as *;
@use '../tokens' as *;

// The Color scheme specific CSS variables can be access as:
// var(--color-surface-1) or by using the color function: color(surface, 1).

// TODO: 1. Generate primary and secondary?? colors shade palettes using '@oddbird/blend'
// TODO: 2. We need to get a way from importing from there here, other using we can't override colors used in the theme when we @use the library and override any colors
// Note: Remove if SASS adds support for CSS Color Modules Level 4 & Level 5
// @forward '@oddbird/blend';

$schemes: (
  light: (
    surface: (
      1: map.get($tokens, colors, gray, 1),
      2: map.get($tokens, colors, white),
      3: map.get($tokens, colors, gray, 2),
      4: map.get($tokens, colors, gray, 3),
    ),
    text: (
      1: map.get($tokens, colors, gray, 9),
      2: map.get($tokens, colors, gray, 6),
      3: map.get($tokens, colors, gray, 4),
      4: map.get($tokens, colors, gray, 3),
    ),
    code-bg: map.get($tokens, colors, gray, 9),
    code-text: map.get($tokens, colors, gray, 1),
    quote-text: map.get($tokens, colors, gray, 8),
    quote-border: map.get($tokens, colors, blue, 6),
  ),
  dark: (
    surface: (
      1: map.get($tokens, colors, gray, 9),
      2: map.get($tokens, colors, gray, 8),
      3: map.get($tokens, colors, gray, 7),
      4: map.get($tokens, colors, gray, 6),
    ),
    text: (
      1: map.get($tokens, colors, gray, 0),
      2: map.get($tokens, colors, gray, 3),
      3: map.get($tokens, colors, gray, 5),
      4: map.get($tokens, colors, gray, 6),
    ),
    code-bg: map.get($tokens, colors, black),
    code-text: map.get($tokens, colors, gray, 1),
    quote-text: map.get($tokens, colors, gray, 1),
    quote-border: map.get($tokens, colors, blue, 6),
  ),
) !default;
