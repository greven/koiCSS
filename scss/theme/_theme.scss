// --------------------------------------
//   Theming (dark, light theme colors)
// --------------------------------------

@use 'sass:map';

@use '../config' as *;
@use '../config/internal' as *;
@use '../core/helpers/internal' as *;
@use '../tokens' as *;
@use 'components';
@use 'color';

$default-theme: map.deep-merge(
  (
    color-schemes: color.$schemes,
    components: components.$config,
  ),
  $tokens
);

$theme: () !default;
$theme: map.deep-merge($default-theme, $theme);

// --------------------------------
//   Mixins
// --------------------------------

@mixin theme {
  @include create-themes();
}

@mixin generate-color-scheme-css-vars($colors-map: (), $color-scheme: null, $suffix: null) {
  /*! purgecss start ignore */
  @each $color, $value in $colors-map {
    @include hsl-color-custom-prop(#{$color-prefix}-#{$color}, $color-scheme, $value, $suffix);
  }
  /*! purgecss end ignore */
}

// Color Schemes

@mixin default-theme($color-schemes-map, $color-scheme: config(default-color-scheme)) {
  html {
    $color-scheme: light;
    @include generate-color-scheme-css-vars(map.get($color-schemes-map, $color-scheme));
  }
}

// Output color vars for each color-scheme
@mixin create-themes($color-schemes-map: color.$schemes) {
  @include default-theme($color-schemes-map);

  @each $color-scheme, $color in $color-schemes-map {
    // Generate color scheme colors (dark, light, ...)
    html {
      @include generate-color-scheme-css-vars($color, $color-scheme);
    }

    @media (prefers-color-scheme: $color-scheme) {
      html {
        @include generate-color-scheme-css-vars(map.get($color-schemes-map, $color-scheme));
        color-scheme: $color-scheme;
      }
    }

    [color-scheme='#{$color-scheme}'],
    [data-theme='#{$color-scheme}'] {
      @include generate-color-scheme-css-vars(map.get($color-schemes-map, $color-scheme));
      color-scheme: $color-scheme;
    }
  }
}
