// --------------------------------------
//   Theming (dark, light theme colors)
// --------------------------------------

@use 'sass:map';

@use '../config' as *;
@use '../tokens' as *;
@use 'color' as *;
@use 'components' as *;

// --------------------------------
//   Vars
// --------------------------------

$colors: map.get($tokens, colors);

$primary: create-theme-color(#dc2626);
$neutral: create-theme-color(#2e3235);

$schemes: (
  light: (
    surface: (
      1: map.get($colors, gray, 1),
      2: map.get($colors, white),
      3: map.get($colors, gray, 2),
      4: map.get($colors, gray, 3),
    ),
    text: (
      1: map.get($colors, gray, 9),
      2: map.get($colors, gray, 6),
      3: map.get($colors, gray, 4),
      4: map.get($colors, gray, 3),
    ),
    code-bg: map.get($colors, gray, 9),
    code-text: map.get($colors, gray, 1),
    quote-text: map.get($colors, gray, 8),
    quote-border: map.get($primary, 6),
  ),
  dark: (
    surface: (
      1: map.get($colors, gray, 9),
      2: map.get($colors, gray, 8),
      3: map.get($colors, gray, 7),
      4: map.get($colors, gray, 6),
    ),
    text: (
      1: map.get($colors, gray, 0),
      2: map.get($colors, gray, 3),
      3: map.get($colors, gray, 5),
      4: map.get($colors, gray, 6),
    ),
    code-bg: map.get($colors, black),
    code-text: map.get($colors, gray, 1),
    quote-text: map.get($colors, gray, 1),
    quote-border: map.get($primary, 6),
  ),
) !default;

$default-theme: map.merge(
  map.deep-merge(
    $tokens,
    (
      colors: (
        primary: $primary,
        neutral: $neutral,
        success: map.get($colors, green),
        info: map.get($colors, blue),
        warning: map.get($colors, yellow),
        danger: map.get($colors, red),
      ),
    )
  ),
  (
    color-schemes: $schemes,
    components: $components,
  )
);

$theme: () !default;
$theme: map.deep-merge($default-theme, $theme);

// --------------------------------
//   Mixins
// --------------------------------

// Color Schemes

@mixin default-theme($color-schemes-map, $color-scheme: config(default-color-scheme)) {
  html {
    $color-scheme: light;
    @include generate-scheme-css-vars(map.get($color-schemes-map, $color-scheme));
  }
}

// Output color vars for each color-scheme
@mixin create-themes($color-schemes-map: $schemes) {
  @include default-theme($color-schemes-map);

  @each $color-scheme, $color in $color-schemes-map {
    // Generate color scheme colors (dark, light, ...)
    html {
      @include generate-scheme-css-vars($color, $color-scheme);
    }

    @media (prefers-color-scheme: $color-scheme) {
      html {
        @include generate-scheme-css-vars(map.get($color-schemes-map, $color-scheme));
        color-scheme: $color-scheme;
      }
    }

    [color-scheme='#{$color-scheme}'],
    [data-theme='#{$color-scheme}'] {
      @include generate-scheme-css-vars(map.get($color-schemes-map, $color-scheme));
      color-scheme: $color-scheme;
    }
  }
}

// Output
@mixin theme {
  @include create-themes();
}
