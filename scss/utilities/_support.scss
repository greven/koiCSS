// ---------------------------------
//   Support Helpers and Variables
// ---------------------------------

@use 'sass:map';
@use 'sass:meta';

@use '../core' as *;

$default-shade: config(fallbacks, colors);

// Flatten theme colors for utility generation
$utility-bg-colors-map: ();
$utility-text-colors-map: ();
$utility-border-colors-map: ();

@each $color, $shades-or-value in theme(colors) {
  // -- Background Colors

  // Simple colors
  @if meta.type-of($shades-or-value) == 'color' {
    $utility-bg-colors-map: map.merge(
      $utility-bg-colors-map,
      (
        '#{$color}': rgba($shades-or-value, var(--koi-bg-opacity)),
      )
    );
  } @else {
    // Color shades
    @each $color-shade, $value in $shades-or-value {
      $utility-bg-colors-map: map.merge(
        $utility-bg-colors-map,
        (
          '#{$color}-#{$color-shade}': rgba($value, var(--koi-bg-opacity)),
        )
      );
      // Alias default color shade
      @if $color-shade == $default-shade {
        $utility-bg-colors-map: map.merge(
          $utility-bg-colors-map,
          (
            '#{$color}': rgba($value, var(--koi-bg-opacity)),
          )
        );
      }
    }
  }

  // -- Text Colors --

  // Simple colors
  @if meta.type-of($shades-or-value) == 'color' {
    $utility-text-colors-map: map.merge(
      $utility-text-colors-map,
      (
        '#{$color}': rgba($shades-or-value, var(--koi-text-opacity)),
      )
    );
  } @else {
    // Color shades
    @each $color-shade, $value in $shades-or-value {
      $utility-text-colors-map: map.merge(
        $utility-text-colors-map,
        (
          '#{$color}-#{$color-shade}': rgba($value, var(--koi-text-opacity)),
        )
      );
      // Alias default color shade
      @if $color-shade == $default-shade {
        $utility-text-colors-map: map.merge(
          $utility-text-colors-map,
          (
            '#{$color}': rgba($value, var(--koi-text-opacity)),
          )
        );
      }
    }
  }

  // -- Border Colors --

  // Simple colors
  @if meta.type-of($shades-or-value) == 'color' {
    $utility-border-colors-map: map.merge(
      $utility-border-colors-map,
      (
        '#{$color}': rgba($shades-or-value, var(--koi-border-opacity)),
      )
    );
  } @else {
    // Color shades
    @each $color-shade, $value in $shades-or-value {
      $utility-border-colors-map: map.merge(
        $utility-border-colors-map,
        (
          '#{$color}-#{$color-shade}': rgba($value, var(--koi-border-opacity)),
        )
      );
      // Alias default color shade
      @if $color-shade == $default-shade {
        $utility-border-colors-map: map.merge(
          $utility-border-colors-map,
          (
            '#{$color}': rgba($value, var(--koi-border-opacity)),
          )
        );
      }
    }
  }
}
