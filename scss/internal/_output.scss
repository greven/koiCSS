// --------------------------------
//   Output Helpers
// --------------------------------

@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';

@use '../config';
@use '../helpers/string' as *;

// --------------------------------
//   Functions
// --------------------------------

// Return the prefix of the css vars if configured
@function _css-var-prefix($prefix: config.$prefix) {
  $prefix: if($prefix == '', '', '#{$prefix}-');
  @return $prefix;
}

// Returns the css custom property
@function css-var-name($name, $key: null, $suffix: null) {
  $prefix: _css-var-prefix();
  $suffix: if($suffix, '-#{$suffix}', '');

  $key: if($name and $key, '-#{$key}', $key);

  @return '--#{$prefix}#{$name}#{$key}#{$suffix}';
}

// A wrapper for var() that prefixes the custom property name if configured.
// Example: css-var(--c-green-5) -> var(--um-c-green-5)
@function css-var($name, $fallback: null) {
  $name: replace($name, '--', '');
  $var-name: string.unquote(css-var-name($name));
  @if $fallback {
    @return var($var-name, $fallback);
  }
  @return var($var-name);
}

// --------------------------------
//   Mixins
// --------------------------------

// Output a CSS custom property (CSS var) definition
@mixin custom-prop($property, $key, $value) {
  $value: if(meta.type-of($value) == 'string', string.unquote($value), $value);
  #{css-var-name($property, $key)}: $value;
}

/// Mixin to vendor prefix a property
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{'-' + $prefix + '-' + $property}: $value;
  }
  // Output standard non-prefixed declaration
  #{$property}: $value;
}
