// --------------------------------
//   Internal Color Helpers
// --------------------------------

@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';

@use '../config/internal' as *;
@use '../helpers/color' as *;
@use 'output' as *;

// --------------------------------
//   Functions
// --------------------------------

// Output a theme color as HSL with the channels as CSS custom props vars.
// To adjust the color one can set its alpha, saturation and/or $lightness.
// If $complment is set to true, it will output the complment of the HSL color
// If $invert is set to true, it will ouput in RGB format the inverted color but it won't allow any other adjustments.
@function hsl-color-var(
  $name,
  $shade: null,
  $alpha: 1,
  $saturation: null,
  $lightness: null,
  $complement: false,
  $invert: false
) {
  @if $invert {
    $rgb-parts: rgb-color-var-parts($name, $shade);
    $color-red: list.nth($rgb-parts, 1);
    $color-green: list.nth($rgb-parts, 2);
    $color-blue: list.nth($rgb-parts, 3);

    @return rgb(calc(255 - $color-red), calc(255 - $color-green), calc(255 - $color-blue));
  }

  $hsl-parts: hsl-color-var-parts($name, $shade);
  $color-hue: list.nth($hsl-parts, 1);
  $color-saturation: list.nth($hsl-parts, 2);
  $color-lightness: list.nth($hsl-parts, 3);

  $hue: if($complement, calc($color-hue + 180deg), $color-hue);
  $saturation: _update-color-channel($color-saturation, $saturation, 100%);
  $lightness: _update-color-channel($color-lightness, $lightness, 100%);

  @return hsl($hue, $saturation, $lightness, $alpha);
}

// Return the theme color css var HSL parts (channels)
@function hsl-color-var-parts($name, $shade: null) {
  $var-name: if($shade, #{$color-prefix}-#{$name}-#{$shade}, #{$color-prefix}-#{$name});
  @return css-var(#{$var-name}-h), css-var(#{$var-name}-s), css-var(#{$var-name}-l);
}

// Return the theme color css var RGB parts (channels)
@function rgb-color-var-parts($name, $shade: null) {
  $var-name: if($shade, #{$color-prefix}-#{$name}-#{$shade}, #{$color-prefix}-#{$name});
  @return css-var(#{$var-name}-r), css-var(#{$var-name}-g), css-var(#{$var-name}-b);
}

@function _update-color-channel($current, $scale, $max) {
  @if ($scale == null) {
    @return $current;
  }

  @if math.unit($scale) != '%' {
    @error "Scale value should be a percentage number beetween 0% and 100%.";
  }

  $scale: math.div($scale, 100%);
  $mult: if($scale > 0, calc($max - $current), $current);

  @return clamp(0%, $current + ($mult * $scale), $max);
}

// --------------------------------
//   Mixins
// --------------------------------

@mixin hsl-color-custom-prop($name, $value) {
  $hsl: hsl-channels($value);

  #{$name}: to-hsl($value);
  #{$name}-h: list.nth($hsl, 1);
  #{$name}-s: list.nth($hsl, 2);
  #{$name}-l: list.nth($hsl, 3);
}

@mixin rgb-color-custom-prop($name, $value) {
  $rgb: rgb-channels($value);

  #{$name}-r: list.nth($rgb, 1);
  #{$name}-g: list.nth($rgb, 2);
  #{$name}-b: list.nth($rgb, 3);
}

// Output a CSS custom property (CSS var) color definition
@mixin color-custom-prop($property, $color-name: null, $value, $suffix: null) {
  @if meta.type-of($value) == 'color' {
    $var-name: #{css-var-name($property, $color-name, $suffix)};
    @include hsl-color-custom-prop($var-name, $value);
    @include rgb-color-custom-prop($var-name, $value);
  } @else {
    @each $shade, $shade-value in $value {
      $key: if($color-name and $shade, '#{$color-name}-#{$shade}', $shade);
      $var-name: #{css-var-name($property, $key, $suffix)};
      @include hsl-color-custom-prop($var-name, $shade-value);
      @include rgb-color-custom-prop($var-name, $shade-value);
    }
  }
}
