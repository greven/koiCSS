// --------------------------------
//   Generators
// --------------------------------

@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';

@use '../config';
@use '../helpers' as *;
@use 'utilities' as *;
@use 'output' as *;
@use 'color' as *;

// --------------------------------
//   Vars
// --------------------------------

$ignore-accent-colors: (white black surface text border);

// --------------------------------
//   CSS Custom Props
// --------------------------------

/* stylelint-disable */

// Generate CSS custom properties (vars) from theme property map.
// Example:  @include generate-css-vars(theme(shadow), shadow);
@mixin generate-css-vars($map: (), $property: null) {
  /*! purgecss start ignore */
  @each $key, $value in $map {
    @include custom-prop($property, $key, $value);
  }
  /*! purgecss end ignore */
}

// Output a colors map as CSS custom properties
@mixin generate-css-color-vars($colors-map: (), $property: null, $suffix: null) {
  /*! purgecss start ignore */
  @each $color-name, $value in $colors-map {
    @include color-custom-prop($property, $color-name, $value, $suffix);

    // Accent colors utility classes
    @if not list.index($ignore-accent-colors, $color-name) {
      .accent-#{'' + $color-name} {
        @include color-custom-prop(accent, null, $value, $suffix);
      }
    }
  }
  /*! purgecss end ignore */
}

// --------------------------------
//   Utilities
// --------------------------------

$_standard-class-utils: ();
$_standard-pseudo-utils: ();
$_responsive-class-utils: ();
$_responsive-pseudo-utils: ();

@mixin _create-utility-maps($utilities) {
  $util-glue: config.$utility-glue;
  $prefix: map.get(config.$settings, prefix);
  $prefix: if($prefix == '', $prefix, '#{$prefix}-');
  @each $utility-key, $utility-map in $utilities {
    $values: map.get($utility-map, values);
    $screens: map.get(config.$theme, screens);
    $pseudos: if(map.has-key($utility-map, state), map.get($utility-map, state), ());
    $local-vars: map.get($utility-map, local-vars);
    $responsive: map.get($utility-map, responsive);
    // TODO: Default value generation
    // $default-value: if(map.has-key($utility-map, default), map.get($utility-map, default), null);

    // If the values are a list or string, convert it into a map
    @if meta.type-of($values) == 'string' or meta.type-of(list.nth($values, 1)) != 'list' {
      $values: list.zip($values, $values);
    }

    // Standard class set
    $class-set: ();
    $pseudo-set: ();

    @each $key, $value in $values {
      $properties: map.get($utility-map, property);

      // Multiple properties are possible
      @if meta.type-of($properties) == 'string' {
        $properties: list.append((), $properties);
      }

      // Use custom class name if present
      $class-name: if(map.has-key($utility-map, class), map.get($utility-map, class), list.nth($properties, 1));
      $class-name: if($class-name == null, '', str-escape($class-name));
      $class-name-modifier: if($key, str-escape(if($class-name == '', '', '-') + $key), '');
      $compiled-class-name: #{$prefix}#{$class-name}#{$class-name-modifier};

      @if $value != null {
        @if meta.type-of($value) == 'string' {
          $value: string.unquote($value);
        }

        $properties-map: map-utility-class-props($properties, $local-vars, $value);

        $map: (
          '#{$compiled-class-name}': (
            parent: null,
            category: standard,
            class-name: $class-name,
            class-name-modifier: $class-name-modifier,
            selector: '.#{$compiled-class-name}',
            responsive: $responsive,
            default: map.get($utility-map, default),
            properties: $properties-map,
          ),
        );

        $class-set: map.merge($class-set, $map);

        // Pseudo / state variants
        @each $pseudo in $pseudos {
          $compiled-pseudo-name: str-escape(#{$pseudo}#{$util-glue}#{$compiled-class-name});

          $map: (
            '#{$compiled-pseudo-name}': (
              parent: '.#{$compiled-class-name}',
              category: pseudo,
              class-name: $class-name,
              class-name-modifier: $class-name-modifier,
              selector: '.#{$compiled-pseudo-name}:#{$pseudo}',
              responsive: $responsive,
              pseudo: $pseudo,
              default: map.get($utility-map, default),
              properties: $properties-map,
            ),
          );

          $pseudo-set: map.merge($pseudo-set, $map);
        }
      }
    }

    $_standard-class-utils: map.merge($_standard-class-utils, $class-set) !global;
    $_standard-pseudo-utils: map.merge($_standard-pseudo-utils, $pseudo-set) !global;

    // Responsive class set
    @if $responsive {
      @each $screen, $breakpoint in $screens {
        $class-set: ();
        // $pseudo-set: ();

        $infix: str-escape(#{$screen}#{$util-glue});

        @each $key, $value in $values {
          $properties: map.get($utility-map, property);

          // Multiple properties are possible
          @if meta.type-of($properties) == 'string' {
            $properties: list.append((), $properties);
          }

          // Use custom class name if present
          $class-name: if(map.has-key($utility-map, class), map.get($utility-map, class), list.nth($properties, 1));
          $class-name: if($class-name == null, '', str-escape($class-name));
          $class-name-modifier: if($key, str-escape(if($class-name == '', '', '-') + $key), '');
          $compiled-class-name: #{$prefix}#{$class-name}#{$class-name-modifier};

          @if $value != null {
            @if meta.type-of($value) == 'string' {
              $value: string.unquote($value);
            }

            $properties-map: map-utility-class-props($properties, $local-vars, $value);

            $map: (
              '#{$infix}#{$compiled-class-name}': (
                category: standard,
                class-name: $class-name,
                class-name-modifier: $class-name-modifier,
                selector: '.#{$infix}#{$compiled-class-name}',
                responsive: $responsive,
                screen: $screen,
                default: map.get($utility-map, default),
                properties: $properties-map,
              ),
            );

            $class-set: map.merge($class-set, $map);
          }
        }

        $_responsive-class-utils: map.merge($_responsive-class-utils, $class-set) !global;
        // $_responsive-pseudo-utils: map.merge($_responsive-class-utils, $class-set) !global;
      }
    }
  }
}

@mixin generate-utilities($utilities) {
  $screens: map.get(config.$theme, screens);

  @include _create-utility-maps($utilities);

  $standard-class-set: map.merge($_standard-class-utils, $_standard-pseudo-utils);
  $responsive-class-set: map.merge($_responsive-class-utils, $_responsive-pseudo-utils);

  @each $class, $class-map in $standard-class-set {
    $selector: map.get($class-map, selector);
    $parent: map.get($class-map, parent);
    $category: map.get($class-map, category);
    $properties: map.get($class-map, properties);

    #{$selector} {
      @if $category == standard {
        @each $key, $value in $properties {
          #{$key}: #{$value};
        }
      } @else {
        @extend #{$parent};
      }
    }
  }

  @each $screen, $breakpoint in $screens {
    @media screen and (min-width: $breakpoint) {
      @each $class, $class-map in $responsive-class-set {
        @if $screen == map.get($class-map, screen) {
          $selector: map.get($class-map, selector);
          $properties: map.get($class-map, properties);

          #{$selector} {
            @each $key, $value in $properties {
              #{$key}: #{$value};
            }
          }
        }
      }
    }
  }
}

// Create a single responsive utility
@mixin create-responsive-utility($class) {
  $util-glue: config.$utility-glue;
  $screens: map.get(config.$theme, screens);
  $class: str-escape($class);

  // Create standard utility first
  .#{$class} {
    @content;
  }

  // Create responsive class modifiers
  @each $screen, $breakpoint in $screens {
    $infix: str-escape(#{'' + $screen + $util-glue});

    @media screen and (min-width: $breakpoint) {
      .#{$infix + $class} {
        @content;
      }
    }
  }
}
/* stylelint-enable */
